{"version":3,"sources":["ReplayCursor.tsx","Assets/bomb.png","Types.tsx","Assets/winner.png","Helpers/Logic/floodFillRecursiveHelper.tsx","Assets/bomb.svg","BombSVG.tsx","Assets/flag-minesweeper.png","FlagSVG.tsx","Cell.tsx","Helpers/Render/renderRow.tsx","Helpers/Logic/delay.tsx","Helpers/Logic/replayMoves.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ReplayCursor","props","useEffect","startX","startY","start","x","y","update","coordX","coordY","timing","duration","ease","easeExpOut","state","style","position","width","height","borderRadius","opacity","backgroundColor","WebkitTransform","transform","visibility","isVisible","CELL_TYPE","GAME_STATE","floodFillRecursiveHelper","squares","i","j","visited","isClicked","type","EMPTY","sum","a","dx","dy","BombSVG","src","bombSVG","FlagSVG","flagSVG","Cell","onClick","gameState","IN_PROGRESS","isFlagged","BOMB","setGameState","LOST","setIsClicked","onContextMenu","e","preventDefault","setIsFlagged","className","color","renderRow","row","rowIndex","board","bombsRemaining","moveHistory","cellsRemaining","setBoard","setBombsRemaining","setMoveHistory","setCellsRemaining","floodFillRecursive","seconds","map","cellContent","columnIndex","flagged","oldBoard","positionX","positionY","isLeftClick","second","delay","time","Promise","resolve","setTimeout","replayMoves","clearBoard","setCursorVisible","setReplayCoordinates","getCoordinates","handleCellClick","handleRightClick","handleClickOpenWinDialog","handleClickOpenLossDialog","secondsToWait","then","length","WIN","App","useState","bombsSpawned","setBombsSpawned","replayCoordinates","cursorVisible","setSeconds","secondsReplay","setSecondsReplay","rows","columns","oldState","initialiseBoard","timerFunction","replayTimerFunction","console","log","openWinDialog","openLossDialog","spawnRandomBombs","generateNumbers","setBomb","column","count","Math","floor","random","countBombsNearby","ONE","TWO","THREE","FOUR","newX","newY","discorveredCells","React","setOpenWinDialog","setOpenLossDialog","handleCloseRestart","window","location","reload","handleCloseReplay","Dialog","open","onClose","DialogTitle","id","DialogContent","DialogContentText","WinnerImage","DialogActions","Button","BombImage","index","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d69a85e2.chunk.js","sourcesContent":["import React, { PureComponent, ReactElement, useEffect, useState } from \"react\";\r\nimport { Animate } from \"react-move\";\r\nimport { easeExpOut } from \"d3-ease\";\r\n\r\ninterface Props {\r\n  coordX: number;\r\n  coordY: number;\r\n  isVisible: boolean;\r\n  startX: number;\r\n  startY: number;\r\n}\r\n\r\nexport default function ReplayCursor(props: Props): ReactElement {\r\n  useEffect(() => {}, [props.startX, props.startY]);\r\n\r\n  return (\r\n    <div>\r\n      <Animate\r\n        start={() => ({\r\n          x: props.startX,\r\n          y: props.startY,\r\n        })}\r\n        update={{\r\n          x: [props.coordX],\r\n          y: [props.coordY],\r\n          timing: { duration: 400, ease: easeExpOut },\r\n        }}\r\n      >\r\n        {(state) => {\r\n          const { x, y } = state;\r\n\r\n          return (\r\n            <div>\r\n              <div\r\n                style={{\r\n                  position: \"absolute\",\r\n                  width: 50,\r\n                  height: 50,\r\n                  borderRadius: \"50%\",\r\n                  opacity: 0.3,\r\n                  backgroundColor: \"white\",\r\n                  WebkitTransform: `translate3d(${x}px, ${y}px, 0)`,\r\n                  transform: `translate3d(${x}px, ${y}px, 0)`,\r\n                  visibility: props.isVisible ? \"visible\" : \"hidden\",\r\n                }}\r\n              />\r\n            </div>\r\n          );\r\n        }}\r\n      </Animate>\r\n    </div>\r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/bomb.80c3d442.png\";","export enum CELL_TYPE {\r\n    BOMB = -1,\r\n    EMPTY = 0,\r\n    ONE = 1,\r\n    TWO = 2,\r\n    THREE = 3,\r\n    FOUR = 4,\r\n  }\r\n  \r\n  export enum GAME_STATE {\r\n    IN_PROGRESS,\r\n    WIN,\r\n    LOST,\r\n  }\r\n  \r\n  export interface CellContent {\r\n    type: CELL_TYPE;\r\n    isClicked: boolean;\r\n    visited: boolean;\r\n    isFlagged: boolean;\r\n  }\r\n  \r\n  export type Move = {\r\n    positionX: number;\r\n    positionY: number;\r\n    isLeftClick: boolean;\r\n    second: number;\r\n  };\r\n  \r\n  export type Coordinate = {\r\n    coordX: number;\r\n    coordY: number;\r\n  };\r\n  ","export default __webpack_public_path__ + \"static/media/winner.2c5dce69.png\";","import { dx, dy } from \"../../App\";\r\nimport { CellContent, CELL_TYPE } from \"../../Types\";\r\n\r\nexport const floodFillRecursiveHelper = (\r\n    squares: CellContent[][],\r\n    i: number,\r\n    j: number\r\n  ): number => {\r\n    // check out of bounds\r\n    if (i < 0 || i > 8) return 0;\r\n    if (j < 0 || j > 8) return 0;\r\n    // check if it's visited\r\n    if (squares[i][j].visited) return 0;\r\n    // Indicate node has been visited\r\n    squares[i][j].visited = true;\r\n    squares[i][j].isClicked = true;\r\n\r\n    if (squares[i][j].type !== CELL_TYPE.EMPTY) {\r\n      squares[i][j].isClicked = true;\r\n      return 1;\r\n    }\r\n    let sum = 0;\r\n    for (let a = 0; a < 4; a++) {\r\n      sum += floodFillRecursiveHelper(squares, i + dx[a], j + dy[a]);\r\n    }\r\n    return sum + 1;\r\n  };","export default __webpack_public_path__ + \"static/media/bomb.41c2f52f.svg\";","import React, { ReactElement } from 'react'\r\nimport bombSVG from './Assets/bomb.svg';\r\n\r\ninterface Props {\r\n    \r\n}\r\n\r\nexport default function BombSVG({}: Props): ReactElement {\r\n    return (\r\n       <img src={bombSVG} height={35} width={35}/>\r\n    )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/flag-minesweeper.f3768cfa.png\";","import React, { ReactElement } from 'react'\r\nimport flagSVG from './Assets/flag-minesweeper.png';\r\n\r\ninterface Props {\r\n    \r\n}\r\n\r\nexport default function FlagSVG({}: Props): ReactElement {\r\n    return (\r\n       <img src={flagSVG} height={35} width={35}/>\r\n    )\r\n}\r\n","import React, { ReactElement, useState } from \"react\";\r\nimport { CELL_TYPE, GAME_STATE } from \"./Types\";\r\nimport \"./App.css\";\r\nimport BombSVG from \"./BombSVG\";\r\nimport FlagSVG from \"./FlagSVG\";\r\n\r\ninterface Props {\r\n  type: CELL_TYPE;\r\n  isClicked: boolean;\r\n  setIsClicked: Function;\r\n  isFlagged: boolean;\r\n  setIsFlagged: Function;\r\n  setGameState: Function;\r\n  gameState: GAME_STATE;\r\n}\r\n\r\nexport default function Cell(props: Props): ReactElement {\r\n  const renderIcon = () => {\r\n    if (props.isFlagged) return <FlagSVG />;\r\n    if (!props.isClicked) return;\r\n    if (props.type === CELL_TYPE.BOMB) {\r\n      return <BombSVG />;\r\n    }\r\n\r\n    if (props.type !== CELL_TYPE.EMPTY) return <>{props.type}</>;\r\n    return <></>;\r\n  };\r\n\r\n  const handleClick = () => {\r\n    if(props.gameState !== GAME_STATE.IN_PROGRESS) return;\r\n    if (props.isFlagged) return;\r\n    if (props.type === CELL_TYPE.BOMB) {\r\n      props.setGameState(GAME_STATE.LOST)\r\n    }\r\n    props.setIsClicked();\r\n  }\r\n\r\n  return (\r\n    <div\r\n      onClick={() => handleClick()}\r\n      onContextMenu={(e) => {\r\n        e.preventDefault();\r\n        if(!props.isClicked) props.setIsFlagged(true);\r\n        if(props.isFlagged) props.setIsFlagged(false);\r\n      }}\r\n      className=\"cell\"\r\n      style={{\r\n        backgroundColor: props.isClicked ? \"#00b4d8\" : \"#03045e\",\r\n        color: \"whitesmoke\",\r\n      }}\r\n    >\r\n      {renderIcon()}\r\n    </div>\r\n  );\r\n}\r\n","import { CellContent, CELL_TYPE, GAME_STATE, Move } from \"../../Types\";\r\nimport Cell from \"../../Cell\";\r\n\r\nexport const renderRow = (\r\n  row: CellContent[],\r\n  rowIndex: number,\r\n  board: CellContent[][],\r\n  bombsRemaining: number,\r\n  moveHistory: Move[],\r\n  cellsRemaining: number,\r\n  gameState: GAME_STATE,\r\n  setBoard: Function,\r\n  setBombsRemaining: Function,\r\n  setMoveHistory: Function,\r\n  setCellsRemaining: Function,\r\n  setGameState: Function,\r\n  floodFillRecursive: Function,\r\n  seconds: number\r\n) => {\r\n  return row.map((cellContent: CellContent, columnIndex: number) => {\r\n    return (\r\n      <Cell\r\n        key={`cell-${rowIndex}-${columnIndex}`}\r\n        type={cellContent.type}\r\n        isClicked={cellContent.isClicked}\r\n        isFlagged={cellContent.isFlagged}\r\n        setIsFlagged={(flagged: boolean) => {\r\n          const oldBoard = [...board];\r\n          oldBoard[rowIndex][columnIndex].isFlagged = flagged;\r\n          if (flagged) setBombsRemaining(bombsRemaining - 1);\r\n          else setBombsRemaining(bombsRemaining + 1);\r\n          setBoard(oldBoard);\r\n          setMoveHistory([\r\n            ...moveHistory,\r\n            {\r\n              positionX: rowIndex,\r\n              positionY: columnIndex,\r\n              isLeftClick: false,\r\n              second: seconds\r\n            },\r\n          ]);\r\n        }}\r\n        setIsClicked={() => {\r\n          const oldBoard = [...board];\r\n\r\n          oldBoard[rowIndex][columnIndex].isClicked = true;\r\n\r\n          setCellsRemaining(cellsRemaining - 1);\r\n\r\n          setBoard(oldBoard);\r\n\r\n          setMoveHistory([\r\n            ...moveHistory,\r\n            {\r\n              positionX: rowIndex,\r\n              positionY: columnIndex,\r\n              isLeftClick: true,\r\n              second: seconds\r\n            },\r\n          ]);\r\n\r\n          if (board[rowIndex][columnIndex].type === CELL_TYPE.EMPTY) {\r\n            floodFillRecursive(rowIndex, columnIndex);\r\n          }\r\n        }}\r\n        setGameState={setGameState}\r\n        gameState={gameState}\r\n      />\r\n    );\r\n  });\r\n};\r\n","export function delay(time: number) {\r\n    return new Promise((resolve) => setTimeout(resolve, time));\r\n}","import { GAME_STATE, Move } from \"../../Types\";\r\nimport { delay } from \"./delay\";\r\n\r\nexport const replayMoves = async (\r\n  clearBoard: Function,\r\n  setCursorVisible: Function,\r\n  moveHistory: Move[],\r\n  setReplayCoordinates: Function,\r\n  getCoordinates: Function,\r\n  handleCellClick: Function,\r\n  handleRightClick: Function,\r\n  handleClickOpenWinDialog: Function,\r\n  handleClickOpenLossDialog: Function,\r\n  gameState: GAME_STATE\r\n) => {\r\n  clearBoard();\r\n  setCursorVisible(true);\r\n\r\n  for (let i = 0; i < moveHistory.length; i++) {\r\n    let secondsToWait: number = 0;\r\n    if(i === 0) secondsToWait = moveHistory[0].second\r\n    else secondsToWait = moveHistory[i].second - moveHistory[i - 1].second;\r\n    await delay(secondsToWait * 1000).then(() => {\r\n      if (moveHistory[i].isLeftClick) {\r\n        setReplayCoordinates(\r\n          getCoordinates(moveHistory[i].positionX, moveHistory[i].positionY)\r\n        );\r\n        handleCellClick(moveHistory[i].positionX, moveHistory[i].positionY);\r\n      } else {\r\n        setReplayCoordinates(\r\n          getCoordinates(moveHistory[i].positionX, moveHistory[i].positionY)\r\n        );\r\n        handleRightClick(moveHistory[i].positionX, moveHistory[i].positionY);\r\n      }\r\n    });\r\n  }\r\n\r\n  if (gameState === GAME_STATE.WIN) handleClickOpenWinDialog();\r\n  if (gameState === GAME_STATE.LOST) handleClickOpenLossDialog();\r\n};\r\n","import {\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogTitle,\r\n} from \"@material-ui/core\";\r\nimport React, { useCallback, useEffect, useRef, useState } from \"react\";\r\nimport \"./App.css\";\r\nimport ReplayCursor from \"./ReplayCursor\";\r\nimport BombImage from \"./Assets/bomb.png\";\r\nimport WinnerImage from \"./Assets/winner.png\";\r\nimport { floodFillRecursiveHelper } from \"./Helpers/Logic/floodFillRecursiveHelper\";\r\nimport { renderRow } from \"./Helpers/Render/renderRow\";\r\nimport { delay } from \"./Helpers/Logic/delay\";\r\nimport { replayMoves } from \"./Helpers/Logic/replayMoves\";\r\nimport { CellContent, CELL_TYPE, Coordinate, GAME_STATE, Move } from \"./Types\";\r\n\r\nexport const dx = [-1, 0, 1, 0, -1, -1, 1, 1];\r\nexport const dy = [0, 1, 0, -1, -1, 1, 1, -1];\r\n\r\nconst INITIAL_BOMBS: number = 20;\r\n\r\nfunction App() {\r\n  const [board, setBoard] = useState<CellContent[][]>([]);\r\n  const [bombsSpawned, setBombsSpawned] = useState<boolean>(false);\r\n  const [gameState, setGameState] = useState<GAME_STATE>(\r\n    GAME_STATE.IN_PROGRESS\r\n  );\r\n  const [bombsRemaining, setBombsRemaining] = useState(INITIAL_BOMBS);\r\n  const [cellsRemaining, setCellsRemaining] = useState(81);\r\n  const [moveHistory, setMoveHistory] = useState<Move[]>([]);\r\n  const [replayCoordinates, setReplayCoordinates] = useState<Coordinate>({\r\n    coordX: 0,\r\n    coordY: -620,\r\n  });\r\n  const [cursorVisible, setCursorVisible] = useState(false);\r\n  const [seconds, setSeconds] = useState(0);\r\n  const [secondsReplay, setSecondsReplay] = useState(0);\r\n\r\n  const initialiseBoard = (rows: number, columns: number) => {\r\n    const oldState = [...board];\r\n\r\n    for (let i = 0; i < rows; i++) {\r\n      oldState[i] = [];\r\n      for (let j = 0; j < columns; j++) {\r\n        oldState[i][j] = {\r\n          type: CELL_TYPE.EMPTY,\r\n          isClicked: false,\r\n          visited: false,\r\n          isFlagged: false,\r\n        };\r\n      }\r\n    }\r\n\r\n    setBoard(oldState);\r\n  };\r\n\r\n  useEffect(() => {\r\n    initialiseBoard(9, 9);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    timerFunction();\r\n  }, [seconds]);\r\n\r\n  useEffect(() => {\r\n    replayTimerFunction();\r\n    setSeconds(secondsReplay);\r\n  }, [secondsReplay]);\r\n\r\n  useEffect(() => {\r\n    console.log(moveHistory);\r\n  }, [moveHistory]);\r\n\r\n  const timerFunction = async () => {\r\n    if (gameState === GAME_STATE.IN_PROGRESS) {\r\n      await delay(1000).then(() => {\r\n        setSeconds(seconds + 1);\r\n      });\r\n    }\r\n  };\r\n\r\n  const replayTimerFunction = async () => {\r\n    if (openWinDialog || openLossDialog) return;\r\n    await delay(1000).then(() => {\r\n      setSecondsReplay(secondsReplay + 1);\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (cellsRemaining === INITIAL_BOMBS) setGameState(GAME_STATE.WIN);\r\n  }, [cellsRemaining]);\r\n\r\n  useEffect(() => {\r\n    if (board.length > 0) {\r\n      if (bombsSpawned === false) {\r\n        spawnRandomBombs(INITIAL_BOMBS);\r\n        setBombsSpawned(true);\r\n        generateNumbers(9, 9);\r\n      }\r\n    }\r\n  }, [board]);\r\n\r\n  const setBomb = (row: number, column: number) => {\r\n    const oldState = [...board];\r\n    oldState[row][column].type = CELL_TYPE.BOMB;\r\n    setBoard(oldState);\r\n  };\r\n\r\n  const spawnRandomBombs = (count: number) => {\r\n    for (let i = 0; i < count; i++) {\r\n      let x = Math.floor(Math.random() * 9);\r\n      let y = Math.floor(Math.random() * 9);\r\n      setBomb(x, y);\r\n    }\r\n  };\r\n\r\n  const generateNumbers = (rows: number, columns: number) => {\r\n    const oldState = [...board];\r\n\r\n    for (let i = 0; i < rows; i++) {\r\n      for (let j = 0; j < columns; j++) {\r\n        if (oldState[i][j].type === CELL_TYPE.EMPTY) {\r\n          const count = countBombsNearby(i, j);\r\n          if (count === 1) oldState[i][j].type = CELL_TYPE.ONE;\r\n          else if (count === 2) oldState[i][j].type = CELL_TYPE.TWO;\r\n          else if (count === 3) oldState[i][j].type = CELL_TYPE.THREE;\r\n          else if (count === 4) oldState[i][j].type = CELL_TYPE.FOUR;\r\n        }\r\n      }\r\n    }\r\n\r\n    setBoard(oldState);\r\n  };\r\n\r\n  const countBombsNearby = (x: number, y: number): number => {\r\n    let count = 0;\r\n\r\n    for (let i = 0; i < 8; i++) {\r\n      // calculam pozitiile din jurul nostru pe rand\r\n      const newX = x + dx[i];\r\n      const newY = y + dy[i];\r\n\r\n      // verificam daca pozitia unde cautam bomba se afla in matrice\r\n      if (newX >= 0 && newY >= 0 && newX <= 8 && newY <= 8) {\r\n        // verificam daca am gasit o bomba\r\n        if (board[newX][newY].type === CELL_TYPE.BOMB) {\r\n          count++;\r\n        }\r\n      }\r\n    }\r\n\r\n    return count;\r\n  };\r\n\r\n  const floodFillRecursive = (i: number, j: number) => {\r\n    const squares = [...board];\r\n\r\n    const discorveredCells = floodFillRecursiveHelper(squares, i, j);\r\n    setCellsRemaining(cellsRemaining - discorveredCells);\r\n    setBoard(squares);\r\n  };\r\n\r\n  const renderBoard = () => {\r\n    return board.map((row: CellContent[], index: number) => {\r\n      return (\r\n        <div className=\"row\" key={`row-${index}`}>\r\n          {renderRow(\r\n            row,\r\n            index,\r\n            board,\r\n            bombsRemaining,\r\n            moveHistory,\r\n            cellsRemaining,\r\n            gameState,\r\n            setBoard,\r\n            setBombsRemaining,\r\n            setMoveHistory,\r\n            setCellsRemaining,\r\n            setGameState,\r\n            floodFillRecursive,\r\n            seconds\r\n          )}\r\n        </div>\r\n      );\r\n    });\r\n  };\r\n\r\n  const refreshPage = () => {\r\n    window.location.reload();\r\n  };\r\n\r\n  const clearBoard = () => {\r\n    const oldBoard = [...board];\r\n\r\n    for (let i = 0; i < 9; i++) {\r\n      for (let j = 0; j < 9; j++) {\r\n        oldBoard[i][j].isClicked = false;\r\n        oldBoard[i][j].visited = false;\r\n        oldBoard[i][j].isFlagged = false;\r\n      }\r\n    }\r\n\r\n    setBoard(oldBoard);\r\n  };\r\n\r\n  const handleCellClick = (rowIndex: number, columnIndex: number) => {\r\n    const oldBoard = [...board];\r\n\r\n    oldBoard[rowIndex][columnIndex].isClicked = true;\r\n\r\n    setCellsRemaining(cellsRemaining - 1);\r\n\r\n    setBoard(oldBoard);\r\n\r\n    if (board[rowIndex][columnIndex].type === CELL_TYPE.EMPTY) {\r\n      floodFillRecursive(rowIndex, columnIndex);\r\n    }\r\n  };\r\n\r\n  const handleRightClick = (rowIndex: number, columnIndex: number) => {\r\n    const oldBoard = [...board];\r\n\r\n    oldBoard[rowIndex][columnIndex].isFlagged =\r\n      !oldBoard[rowIndex][columnIndex].isFlagged;\r\n\r\n    setBoard(oldBoard);\r\n  };\r\n\r\n  const getCoordinates = (\r\n    rowIndex: number,\r\n    columnIndex: number\r\n  ): Coordinate => {\r\n    // [0, 0] = {0, -620}\r\n    // [0, 1] = {70, -620}\r\n    // [0, 2] = {140, -620}\r\n    // [1, 0] = [0, -550]\r\n    // [x, y] = {y * 70, -620 + x * 70}\r\n    return { coordX: columnIndex * 70, coordY: -620 + rowIndex * 70 };\r\n  };\r\n\r\n  // MODAL START\r\n\r\n  const [openWinDialog, setOpenWinDialog] = React.useState(false);\r\n  const [openLossDialog, setOpenLossDialog] = React.useState(false);\r\n\r\n  useEffect(() => {\r\n    if (gameState === GAME_STATE.WIN) handleClickOpenWinDialog();\r\n    if (gameState === GAME_STATE.LOST) handleClickOpenLossDialog();\r\n  }, [gameState]);\r\n\r\n  const handleClickOpenWinDialog = async () => {\r\n    await delay(1500).then(() => {\r\n      setOpenWinDialog(true);\r\n    });\r\n  };\r\n\r\n  const handleClickOpenLossDialog = async () => {\r\n    await delay(1500).then(() => {\r\n      setOpenLossDialog(true);\r\n    });\r\n  };\r\n\r\n  const handleCloseRestart = () => {\r\n    setOpenWinDialog(false);\r\n    setOpenLossDialog(false);\r\n    refreshPage();\r\n  };\r\n\r\n  const handleCloseReplay = () => {\r\n    setOpenWinDialog(false);\r\n    setOpenLossDialog(false);\r\n    setSecondsReplay(0);\r\n    replayTimerFunction();\r\n    replayMoves(\r\n      clearBoard,\r\n      setCursorVisible,\r\n      moveHistory,\r\n      setReplayCoordinates,\r\n      getCoordinates,\r\n      handleCellClick,\r\n      handleRightClick,\r\n      handleClickOpenWinDialog,\r\n      handleClickOpenLossDialog,\r\n      gameState\r\n    );\r\n  };\r\n\r\n  //MODAL END\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div>\r\n        <Dialog\r\n          open={openWinDialog}\r\n          onClose={handleCloseRestart}\r\n          aria-labelledby=\"alert-dialog-title\"\r\n          aria-describedby=\"alert-dialog-description\"\r\n        >\r\n          <DialogTitle id=\"alert-dialog-title\">\r\n            {\"💣Congratulations, you won the game!💣\"}\r\n          </DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText id=\"alert-dialog-description\">\r\n              Congratulations!!!💣💣💣 Now you can play another game by clicking\r\n              Restart Button or watch the replay of the game by clicking Replay\r\n              Button!\r\n              <div className=\"centerImage\">\r\n                <img height=\"300\" width=\"700\" src={WinnerImage} />\r\n              </div>\r\n            </DialogContentText>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={handleCloseRestart}>RESTART</Button>\r\n            <Button onClick={handleCloseReplay}>REPLAY</Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      </div>\r\n      <div>\r\n        <Dialog\r\n          open={openLossDialog}\r\n          onClose={handleCloseRestart}\r\n          aria-labelledby=\"alert-dialog-title\"\r\n          aria-describedby=\"alert-dialog-description\"\r\n        >\r\n          <DialogTitle id=\"alert-dialog-title\">\r\n            {\"💣Unfortunately, you didn't win this game!💣\"}\r\n          </DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText id=\"alert-dialog-description\">\r\n              Maybe next time :(💣 Now you can play another game by clicking\r\n              Restart Button or watch the replay of the game by clicking Replay\r\n              Button!\r\n              <div className=\"centerImage\">\r\n                <img src={BombImage} />\r\n              </div>\r\n            </DialogContentText>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={handleCloseRestart}>RESTART</Button>\r\n            <Button onClick={handleCloseReplay}>REPLAY</Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      </div>\r\n      <div className=\"line-up\">\r\n        <div className=\"bombcounter\">Bomb Counter: {bombsRemaining}</div>\r\n        <div className=\"seconds\">Time: {seconds} seconds</div>\r\n      </div>\r\n      <div className=\"board\">\r\n        {renderBoard()}\r\n        <ReplayCursor\r\n          coordX={replayCoordinates.coordX}\r\n          coordY={replayCoordinates.coordY}\r\n          isVisible={cursorVisible}\r\n          startX={moveHistory[0]?.positionX ? moveHistory[0].positionX : 0}\r\n          startY={moveHistory[0]?.positionY ? moveHistory[0].positionY : -620}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}